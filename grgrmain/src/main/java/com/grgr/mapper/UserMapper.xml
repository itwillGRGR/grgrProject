<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.grgr.mapper.UserMapper">

	<!-- 회원가입 -->
	<insert id="userJoin">
		INSERT INTO USERINFO(UNO, USER_NAME, USER_ID,
		USER_PW, NICKNAME, PHONE, EMAIL, BUSINESS_NO, USER_STATUS)
		VALUES(UNO_SEQ.NEXTVAL,
		#{userName},#{userId}, #{userPw},
		#{nickName},
		#{phone}, #{email},
		#{businessNo},2)
	</insert>

	<!-- 아이디 중복 검사 -->
	<select id="idCheck" resultType="int">
		select count(*) from USERINFO
		where USER_ID = #{userId}
	</select>

	<!-- 닉네임 중복 검사 -->
	<select id="nickNameCheck" resultType="int">
		select count(*) from
		USERINFO
		where nickName = #{nickName}
	</select>

	<!-- 로그인 -->
	<select id="userLogin" resultType="com.grgr.dto.UserVO">

		select * from USERINFO where
		USER_ID = #{userId}
	</select>

	<update id="updateLastLoginDate"
		parameterType="com.grgr.dto.UserVO">
		UPDATE USERINFO SET LAST_LOGIN = SYSDATE WHERE UNO =
		#{uno}
	</update>



	<select id="getAllUsers" resultType="com.grgr.dto.UserVO">
    <![CDATA[
    SELECT *
    FROM (
        SELECT ROWNUM AS rn, u.*
        FROM (
            SELECT UNO, USER_NAME, NICKNAME, USER_PW, USER_ID, PHONE, EMAIL, USER_STATUS, ACTIVE, POINT, BUSINESS_NO, USER_LOC, LAST_LOGIN, REGDATE, USER_UPDATE, USER_UPDATE_UNO
            FROM USERINFO
            ORDER BY UNO DESC
        ) u
        WHERE ROWNUM <= #{endRow}
    )
    WHERE rn >= #{startRow}
    ]]>
	</select>

	<select id="selectUserCount" resultType="int">
		select count(*) from
		userinfo
	</select>

	<!-- user-update 쿼리 -->
	<update id="updateUser" parameterType="com.grgr.dto.UserVO">
		UPDATE userinfo
		SET
		user_name = #{userName},
		nickname = #{nickName},
		user_id = #{userId},
		phone=#{phone},
		email=#{email},
		user_status=#{userStatus},
		active=#{active},
		point=#{point},
		business_no=#{businessNo},
		user_update_uno=#{userUpdateUno}
		WHERE uno = #{uno}
	</update>

	<!-- 아이디 찾기 -->
	<select id="findUserIdByNameAndEmail"
		resultType="java.lang.String">
		SELECT user_id
		FROM userinfo
		WHERE user_name = #{name}
		AND
		email = #{email}
	</select>

	<!-- 비밀번호 찾기 -->



	<select id="findUserByIdAndEmail" parameterType="map"
		resultType="com.grgr.dto.UserVO">
		SELECT * FROM userinfo
		WHERE user_id = #{userId}
		AND email =
		#{email}
	</select>

	<!-- 사용자 비밀번호 업데이트 -->
	<update id="updateUserPassword"
		parameterType="com.grgr.dto.UserVO">
		UPDATE userinfo
		SET user_pw = #{userPw}
		WHERE user_id =
		#{userId}
	</update>

	<!-- 회원 조회 -->
	<select id="userProfile" resultType="com.grgr.dto.UserVO">
		select * from USERINFO where
		UNO = #{uno}
	</select>

	<!-- 회원정보 수정 --> <!-- 변경한 사람의 uno에 대한 코드 추가 필요(방법 의문) -->
	<update id="updateUserProfile">
		update USERINFO set PHONE = #{phone}, EMAIL =
		#{email}, USER_PW = #{userPw}, BUSINESS_NO = #{businessNo},
		USER_UPDATE_UNO = #{uno},
		USER_UPDATE = sysdate
		where UNO =#{uno}
	</update>

	<delete id="deleteUserProfile">
		delete from USERINFO where UNO = #{uno}
	</delete>

	<!-- 내가 쓴 댓글 조회(조인) -->
	<resultMap id="commentResultMap"
		type="com.grgr.dto.MyCommentDTO">
		<result column="BNO" property="bno" />
		<result column="CONTENT" property="content" />
		<result column="REGDATE" property="regdate" />
		<result column="BOARDTYPE" property="boardtype" />
		<result column="UNO" property="uno" />
	</resultMap>


	<select id="getCommentList" resultMap="commentResultMap"
		parameterType="int">
		SELECT *
		FROM (
		SELECT
		UNO,
		BNO,
		BOARDTYPE,
		CONTENT,
		REGDATE,
		ROW_NUMBER()
		OVER (ORDER BY REGDATE DESC) AS RN
		FROM (
		SELECT
		INFO_COMMENT.UNO AS UNO,
		INFO_COMMENT.INFO_BNO AS BNO,
		INFO_COMMENT.BOARDTYPE AS BOARDTYPE,
		INFO_COMMENT.INFO_COMMENT_CONTENT
		AS CONTENT,
		INFO_COMMENT.INFO_COMMENT_REGDATE AS REGDATE
		FROM
		INFO_COMMENT
		JOIN
		USERINFO ON INFO_COMMENT.UNO = USERINFO.UNO
		WHERE
		INFO_COMMENT.UNO =
		#{uno}
		AND INFO_COMMENT.INFO_COMMENT_BLINDSTATE = 1

		UNION ALL

		SELECT
		FREE_COMMENT.UNO AS UNO,
		FREE_COMMENT.FREE_BNO AS BNO,
		FREE_COMMENT.BOARDTYPE AS BOARDTYPE,
		FREE_COMMENT.FREE_COMMENT_CONTENT
		AS CONTENT,
		FREE_COMMENT.FREE_COMMENT_REGDATE AS REGDATE
		FROM
		FREE_COMMENT
		JOIN
		USERINFO ON FREE_COMMENT.UNO = USERINFO.UNO
		WHERE
		FREE_COMMENT.UNO =
		#{uno}
		AND FREE_COMMENT.FREE_COMMENT_BLINDSTATE = 1

		UNION ALL

		SELECT
		QNA_COMMENT.UNO AS UNO,
		QNA_COMMENT.QNA_BNO AS BNO,
		QNA_COMMENT.BOARDTYPE AS BOARDTYPE,
		QNA_COMMENT.QNA_COMMENT_CONTENT AS
		CONTENT,
		QNA_COMMENT.QNA_COMMENT_REGDATE AS REGDATE
		FROM
		QNA_COMMENT
		JOIN
		USERINFO
		ON QNA_COMMENT.UNO = USERINFO.UNO
		WHERE
		QNA_COMMENT.UNO =
		#{uno}
		AND QNA_COMMENT.QNA_COMMENT_BLINDSTATE = 1
		)
		COMBINED
		) TEMP
		WHERE
		RN
		BETWEEN #{startRow} AND #{endRow}


	</select>

	<!-- 내가 쓴 전체 댓글 갯수 -->
	<select id="selectCommentCount" resultType="int"
		parameterType="int">
		SELECT COUNT(*) AS total_count
		FROM (
		SELECT
		INFO_COMMENT.UNO AS UNO
		FROM INFO_COMMENT
		WHERE INFO_COMMENT.UNO =
		#{uno}
		AND
		INFO_COMMENT.INFO_COMMENT_BLINDSTATE = 1
		UNION ALL
		SELECT
		QNA_COMMENT.UNO AS UNO
		FROM QNA_COMMENT
		WHERE
		QNA_COMMENT.UNO
		= #{uno}
		AND
		QNA_COMMENT.QNA_COMMENT_BLINDSTATE = 1
		UNION ALL
		SELECT FREE_COMMENT.UNO
		AS UNO
		FROM FREE_COMMENT
		WHERE
		FREE_COMMENT.UNO
		= #{uno}
		AND
		FREE_COMMENT.FREE_COMMENT_BLINDSTATE = 1
		) total
	</select>

	<!-- 내가 쓴 게시글 조회(조인) -->
	<resultMap id="boardWriteResultMap"
		type="com.grgr.dto.MyBoardWriteDTO">
		<result column="TITLE" property="title" />
		<result column="CONTENT" property="content" />
		<result column="REGDATE" property="regdate" />
		<result column="VIEW_CNT" property="viewCnt" />
		<result column="NICKNAME" property="nickName" />
		<result column="BOARDTYPE" property="boardtype" />
		<result column="BNO" property="bno" />
		<result column="UNO" property="uno" />
	</resultMap>
	<select id="getBoardWriteList" resultMap="boardWriteResultMap"
		parameterType="int">
		SELECT *
		FROM (
		SELECT
		UNO,
		BNO,
		TITLE,
		CONTENT,
		VIEWCNT,
		REGDATE,
		NICKNAME,
		BOARDTYPE,
		ROW_NUMBER() OVER (ORDER BY REGDATE
		DESC)
		AS
		RN
		FROM (
		SELECT
		INFO_BOARD.UNO AS UNO,
		INFO_BOARD.INFO_BNO AS
		BNO,
		INFO_BOARD.INFO_TITLE AS TITLE,
		INFO_BOARD.INFO_CONTENT AS CONTENT,
		INFO_BOARD.INFO_VIEW_CNT AS VIEWCNT,
		INFO_BOARD.INFO_REGDATE AS
		REGDATE,
		INFO_BOARD.BOARDTYPE AS BOARDTYPE,
		USERINFO.NICKNAME AS
		NICKNAME
		FROM INFO_BOARD
		JOIN USERINFO ON INFO_BOARD.UNO = USERINFO.UNO
		WHERE INFO_BOARD.UNO = #{uno} AND (INFO_BOARD.INFO_BLINDSTATE = 1 or
		INFO_BOARD.INFO_BLINDSTATE = 4)

		UNION
		ALL

		SELECT
		QNA_BOARD.UNO AS UNO,
		QNA_BOARD.QNA_BNO AS BNO,
		QNA_BOARD.QNA_TITLE AS TITLE,
		QNA_BOARD.QNA_CONTENT AS CONTENT,
		QNA_BOARD.QNA_VIEW_CNT AS VIEWCNT,
		QNA_BOARD.QNA_REGDATE AS REGDATE,
		QNA_BOARD.BOARDTYPE AS BOARDTYPE,
		USERINFO.NICKNAME AS NICKNAME
		FROM
		QNA_BOARD
		JOIN USERINFO ON
		QNA_BOARD.UNO = USERINFO.UNO
		WHERE
		QNA_BOARD.UNO = #{uno} AND
		(QNA_BOARD.QNA_BLINDSTATE = 1 or QNA_BOARD.QNA_BLINDSTATE = 4)

		UNION
		ALL

		SELECT
		FREE_BOARD.UNO AS UNO,
		FREE_BOARD.FREE_BNO AS BNO,
		FREE_BOARD.FREE_TITLE AS TITLE,
		FREE_BOARD.FREE_CONTENT AS CONTENT,
		FREE_BOARD.FREE_VIEW_CNT AS VIEWCNT,
		FREE_BOARD.FREE_REGDATE AS
		REGDATE,
		FREE_BOARD.BOARDTYPE AS BOARDTYPE,
		USERINFO.NICKNAME AS
		NICKNAME
		FROM FREE_BOARD
		JOIN USERINFO ON FREE_BOARD.UNO = USERINFO.UNO
		WHERE FREE_BOARD.UNO = #{uno} AND (FREE_BOARD.FREE_BLINDSTATE = 1 or
		FREE_BOARD.FREE_BLINDSTATE = 4)

		UNION
		ALL

		SELECT
		PRODUCT_BOARD.UNO AS UNO,
		PRODUCT_BOARD.PRODUCT_ID AS
		BNO,
		PRODUCT_BOARD.PRODUCT_TITLE AS TITLE,
		PRODUCT_BOARD.PRODUCT_CONTENT AS
		CONTENT,
		PRODUCT_BOARD.PRODUCT_VIEW_CNT AS VIEWCNT,
		PRODUCT_BOARD.PRODUCT_REGDATE AS REGDATE,
		PRODUCT_BOARD.BOARDTYPE AS
		BOARDTYPE,
		USERINFO.NICKNAME AS NICKNAME
		FROM PRODUCT_BOARD
		JOIN USERINFO
		ON PRODUCT_BOARD.UNO = USERINFO.UNO
		WHERE PRODUCT_BOARD.UNO = #{uno}
		AND PRODUCT_BOARD.PRODUCT_BLINDSTATE = 1
		) COMBINED
		) TEMP
		WHERE RN
		BETWEEN #{startRow} AND #{endRow}
	</select>


	<!-- 내가 쓴 전체 게시글 갯수 -->
	<select id="selectWriteCount" resultType="int"
		parameterType="int">
		SELECT COUNT(*) AS total_count
		FROM (
		SELECT
		INFO_BOARD.UNO
		FROM INFO_BOARD
		WHERE INFO_BOARD.UNO = #{uno}
		AND
		INFO_BOARD.INFO_BLINDSTATE = 1
		UNION ALL
		SELECT QNA_BOARD.UNO
		FROM
		QNA_BOARD
		WHERE QNA_BOARD.UNO = #{uno}
		AND QNA_BOARD.QNA_BLINDSTATE = 1
		UNION ALL
		SELECT FREE_BOARD.UNO
		FROM FREE_BOARD
		WHERE FREE_BOARD.UNO =
		#{uno}
		AND FREE_BOARD.FREE_BLINDSTATE = 1
		UNION ALL
		SELECT
		PRODUCT_BOARD.UNO
		FROM PRODUCT_BOARD
		WHERE PRODUCT_BOARD.UNO = #{uno}
		AND PRODUCT_BOARD.PRODUCT_BLINDSTATE = 1
		) total
	</select>

	<!-- 관심게시글 조회(조인) -->
	<resultMap id="LikeResultMap" type="com.grgr.dto.MyLike">
		<result property="title" column="TITLE" />
		<result property="content" column="CONTENT" />
		<result property="regdate" column="REGDATE" />
		<result property="viewCnt" column="VIEW_CNT" />
		<result property="nickName" column="NICKNAME" />
		<result property="boardtype" column="BOARDTYPE" />
		<result property="likeNo" column="LIKE_NO" />
		<result property="likeRegdate" column="LIKE_REGDATE" />
		<result property="bno" column="BNO" />
		<result property="uno" column="UNO" />
	</resultMap>

	<select id="getLikeList" parameterType="int"
		resultMap="LikeResultMap">
		SELECT * FROM (
		SELECT UNO, BNO, TITLE, CONTENT, VIEWCNT,
		REGDATE, NICKNAME, BOARDTYPE,
		LIKENO, LIKEREGDATE, ROW_NUMBER()
		OVER
		(ORDER BY LIKEREGDATE DESC) AS RN FROM (

		SELECT INFO_LIKE.UNO AS UNO,
		INFO_LIKE.INFO_BNO AS BNO,
		INFO_LIKE.INFO_LIKE_NO AS LIKENO,
		INFO_LIKE.INFO_LIKE_REGDATE AS LIKEREGDATE,
		INFO_BOARD.INFO_TITLE AS
		TITLE,
		INFO_BOARD.INFO_CONTENT AS CONTENT,
		INFO_BOARD.INFO_VIEW_CNT AS
		VIEWCNT,
		INFO_BOARD.INFO_REGDATE AS REGDATE,
		INFO_BOARD.BOARDTYPE AS
		BOARDTYPE,
		USERINFO.NICKNAME AS NICKNAME
		FROM INFO_LIKE
		INNER JOIN
		USERINFO ON INFO_LIKE.UNO = USERINFO.UNO
		INNER JOIN INFO_BOARD ON
		INFO_LIKE.INFO_BNO = INFO_BOARD.INFO_BNO
		WHERE INFO_LIKE.UNO = #{uno}

		UNION ALL

		SELECT FREE_LIKE.UNO AS UNO,
		FREE_LIKE.FREE_BNO AS BNO,
		FREE_LIKE.FREE_LIKE_NO AS LIKENO,
		FREE_LIKE.FREE_LIKE_REGDATE AS
		LIKEREGDATE,
		FREE_BOARD.FREE_TITLE AS TITLE,
		FREE_BOARD.FREE_CONTENT AS
		CONTENT,
		FREE_BOARD.FREE_VIEW_CNT AS VIEWCNT,
		FREE_BOARD.FREE_REGDATE AS
		REGDATE,
		FREE_BOARD.BOARDTYPE AS BOARDTYPE,
		USERINFO.NICKNAME AS
		NICKNAME
		FROM FREE_LIKE
		INNER JOIN USERINFO ON FREE_LIKE.UNO =
		USERINFO.UNO
		INNER JOIN FREE_BOARD ON FREE_LIKE.FREE_BNO =
		FREE_BOARD.FREE_BNO
		WHERE FREE_LIKE.UNO = #{uno}
		)

		COMBINED) TEMP WHERE
		RN BETWEEN #{startRow} AND #{endRow}
	</select>

	<!-- 관심게시글 전체 갯수 -->
	<select id="selectLikeCount" resultType="int"
		parameterType="int">
		SELECT COUNT(*) AS total_count
		FROM (
		SELECT INFO_LIKE.UNO
		AS UNO FROM INFO_LIKE WHERE INFO_LIKE.UNO = #{uno}
		UNION ALL
		SELECT
		FREE_LIKE.UNO AS UNO FROM FREE_LIKE WHERE FREE_LIKE.UNO = #{uno}
		)
		total
	</select>

	<!-- 검색 조건문 -->
	<!-- TC:제목+내용, T: 제목, C: 내용, -->
	<sql id="search">
		<trim prefix="(" suffix=") AND " prefixOverrides="OR">
			<choose>
				<when test="searchType == 'TC'.toString()">
					INFO_BOARD.INFO_TITLE like
					'%'||#{searchKeyword}||'%' OR
					INFO_BOARD.INFO_CONTENT like
					'%'||#{searchKeyword}||'%'
				</when>
				<when test="searchType == 'T'.toString()">
					INFO_BOARD.INFO_TITLE like
					'%'||#{searchKeyword}||'%'
				</when>
				<when test="searchType == 'C'.toString()">
					INFO_BOARD.INFO_CONTENT '%'||#{searchKeyword}||'%'
				</when>
			</choose>
		</trim>
	</sql>

	<!-- 위치 정보 업데이트 -->
	<update id="getAddressFromCoordinate"
		parameterType="java.util.Map">
		UPDATE USERINFO
		SET USER_LOC = #{address}
		WHERE USER_ID =
		#{loginId}
	</update>

	<!-- 신고 조회 -->
	<resultMap id="ReportResultMap"
		type="com.grgr.dto.ReportAdmin">
		<result column="REPORT_NO" property="reportNo" />
		<result column="BNO" property="bno" />
		<result column="UNO" property="uno" />
		<result column="TITLE" property="title" />
		<result column="ID" property="id" />
		<result column="REPORT_REASON" property="reportReason" />
		<result column="REPORT_REGDATE" property="reportRegdate" />
	</resultMap>

	<select id="getReportList" resultMap="ReportResultMap"
		parameterType="int">
		SELECT *
		FROM (
		SELECT
		REPORT_NO,
		BNO,
		UNO,
		ID,
		TITLE,
		BOARDTYPE,
		REPORT_REASON,
		REPORT_REGDATE,
		ROW_NUMBER() OVER (ORDER BY
		REPORT_REGDATE
		DESC)
		AS
		RN
		FROM (

		SELECT
		REPORT_INFOBOARD.REPORT_INFOBOARD_NO AS REPORT_NO,
		REPORT_INFOBOARD.INFO_BNO AS BNO,
		REPORT_INFOBOARD.UNO AS UNO,
		REPORT_INFOBOARD.REPORT_INFOBOARD_REASON AS REPORT_REASON,
		REPORT_INFOBOARD.REPORT_INFOBOARD_REGDATE AS REPORT_REGDATE,
		INFO_BOARD.INFO_TITLE AS TITLE,
		INFO_BOARD.BOARDTYPE AS BOARDTYPE,
		USERINFO.USER_ID AS ID
		FROM REPORT_INFOBOARD
		JOIN USERINFO ON
		REPORT_INFOBOARD.UNO = USERINFO.UNO
		JOIN INFO_BOARD ON
		REPORT_INFOBOARD.INFO_BNO = INFO_BOARD.INFO_BNO

		UNION ALL

		SELECT
		REPORT_QNABOARD.REPORT_QNABOARD_NO AS REPORT_NO,
		REPORT_QNABOARD.QNA_BNO AS BNO,
		REPORT_QNABOARD.UNO AS UNO,
		REPORT_QNABOARD.REPORT_REASON AS REPORT_REASON,
		REPORT_QNABOARD.REPORT_REGDATE AS REPORT_REGDATE,
		QNA_BOARD.QNA_TITLE
		AS TITLE,
		QNA_BOARD.BOARDTYPE AS BOARDTYPE,
		USERINFO.USER_ID AS ID
		FROM
		REPORT_QNABOARD
		JOIN USERINFO ON REPORT_QNABOARD.UNO = USERINFO.UNO
		JOIN QNA_BOARD ON REPORT_QNABOARD.QNA_BNO = QNA_BOARD.QNA_BNO
		<!-- UNION ALL SELECT REPORT_FREEBOARD.REPORT_FREEBOARD_NO AS REPORT_NO, 
			REPORT_FREEBOARD.FREE_BNO AS BNO, REPORT_FREEBOARD.UNO AS UNO, REPORT_FREEBOARD.REPORT_FREEBOARD_REASON 
			AS REPORT_REASON, REPORT_FREEBOARD.REPORT_FREEBOARD_REGDATE AS REPORT_REGDATE, 
			FREE_BOARD.FREE_TITLE AS TITLE, FREE_BOARD.BOARDTYPE AS BOARDTYPE, USERINFO.USER_ID 
			AS ID FROM REPORT_FREEBOARD JOIN USERINFO ON REPORT_FREEBOARD.UNO = USERINFO.UNO 
			JOIN FREE_BOARD ON REPORT_FREEBOARD.FREE_BNO = FREE_BOARD.FREE_BNO -->
		) COMBINED
		) TEMP
		WHERE RN
		BETWEEN #{startRow} AND #{endRow}
	</select>

	<!-- 전체 신고수 -->
	<select id="selectReportCount" resultType="int"
		parameterType="int">
		SELECT COUNT(*) AS total_count
		FROM (
		SELECT
		REPORT_INFOBOARD.REPORT_INFOBOARD_NO from REPORT_INFOBOARD
		UNION ALL
		SELECT REPORT_QNABOARD.REPORT_QNABOARD_NO from REPORT_QNABOARD
		<!-- UNION ALL SELECT REPORT_FREEBOARD.REPORT_FREEBOARD_NO from REPORT_FREEBOARD -->
		) total;
	</select>

	<!-- 휴면계정 전환 -->
	<update id="updateUserDisactivate"> UPDATE USERINFO SET (ACTIVE = 2)
		WHERE
		MONTHS_BETWEEN(SYSDATE, LAST_LOGIN) >= 3 AND ACTIVE = 1
	</update>
	<!-- <update id="updateUserDisactivate"> UPDATE USERINFO SET ACTIVE = 2 
		WHERE TRUNC(SYSDATE) - TRUNC(LAST_LOGIN) >= 3 AND ACTIVE = 1 </update> -->

	<!-- 휴면계정 해제 -->
	<update id="updateUserActivate">
		UPDATE USERINFO SET ACTIVE = 1 WHERE UNO = #{uno} AND
		EMAIL = #{email}
		AND ACTIVE = 2
	</update>

	<!-- 나의 주문 목록 조회 -->
	<resultMap id="selectMyOrderListMap"
		type="com.grgr.dto.MyOrderListDTO">
		<result property="uno" column="UNO" />
		<result property="orderNo" column="order_no" />
		<result property="orderGroup" column="order_group" />
		<result property="orderQuantity" column="order_quantity" />
		<result property="orderDate" column="order_date" />
		<result property="orderStatus" column="order_status" />
		<result property="totalPrice" column="totalprice" />
		<result property="productPrice" column="product_price" />
		<result property="productTitle" column="product_title" />
	</resultMap>
	<select id="selectMyOrderList" resultMap="selectMyOrderListMap"
		parameterType="int">
		SELECT
		OP.order_no, op.order_group, op.order_quantity, op.order_date, op.order_status,
		op.totalprice,
		PB.product_price, pb.product_title
		FROM
		orderpage OP
		JOIN
		product_board PB ON OP.product_id = PB.product_id
		JOIN
		userinfo U ON OP.uno = U.uno 
		WHERE
		U.uno = ${uno} AND OP.order_status != 1

	</select>

</mapper>